type CollectionMetadata {
  currentPage: Int!
  limitValue: Int!
  totalCount: Int!
  totalPages: Int!
}

"""
Autogenerated input type of CreateOccurrenceWeb
"""
input CreateOccurrenceWebInput {
  projectId: Int!

  """
  Vulnerability template ID
  """
  vulnerabilityModelId: Int

  """
  Possible options [low, medium or high]
  """
  impact: String!

  """
  Possible options [low, medium or high]
  """
  probability: String!
  clientImpact: String!
  impactResume: String!
  webProtocol: String!

  """
  Possible options [GET, POST, DELETE, PUT, PATCH, HEAD, CONNECT, OPTIONS, TRACE]
  """
  webMethod: String!
  webUrl: String!
  webSteps: String!
  webRequest: String!
  webResponse: String!
  invaded: Boolean!

  """
  Required only if invaded true
  """
  invadedEnvironmentDescription: String
  evidenceText: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateOccurrenceWeb
"""
type CreateOccurrenceWebPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  occurrence: Occurrence
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  """
  Create a Occurrence
  """
  createOccurrenceWeb(
    """
    Parameters for CreateOccurrenceWeb
    """
    input: CreateOccurrenceWebInput!
  ): CreateOccurrenceWebPayload
}

type Occurrence {
  affectedComponentId: Int
  authorId: Int
  clientImpact: String
  closeComments: Boolean
  codeReviewCode: String
  codeReviewInputData: String
  codeReviewOutputData: String
  codeReviewVector: String
  commitmentAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  criticity: String
  deployId: Int
  externalVid: String
  failureType: String
  gauntletIssueId: Int
  githubAlertId: String
  id: ID!
  impact: String
  impactResume: String
  invaded: Boolean
  invadedEnvironmentDescription: String
  legacyId: String
  notificationTitle: String
  notificationType: Boolean
  othersHost: String
  othersProtocol: String
  othersSteps: String
  othersVector: String
  probability: String
  projectId: Int
  updatedAt: ISO8601DateTime!
  vid: String
  vulnerabilityModelId: Int
  vulnerabilityStatus: String
  webMethod: String
  webParameters: String
  webProtocol: String
  webRequest: String
  webResponse: String
  webSteps: String
  webUrl: String
}

type OccurrenceCollection {
  collection: [Occurrence!]!
  metadata: CollectionMetadata!
}

type Project {
  activeObeo: Boolean
  apiCode: String
  apiResponseReview: String
  applicant: String
  applicantArea: String
  auditing: String
  closeComments: Boolean
  connectivity: String
  continuousDelivery: Boolean
  contractedHours: Int
  createdAt: ISO8601DateTime
  deploySendFrequency: Int
  description: String
  dueDate: ISO8601DateTime
  endDate: ISO8601DateTime
  environmentInvaded: Boolean
  estimatedDays: String
  estimatedHours: String
  executiveSummary: String
  freeRetest: Boolean
  hasOpenRetest: Boolean
  hoursOrDays: String
  id: ID!
  integrationDeploy: Boolean
  inviteToken: String
  isOpen: Boolean!
  isPublic: Boolean
  label: String!
  language: String
  lastProjectStatusId: Int
  mainRecommendations: String
  microserviceFolder: String
  notificationList: String
  occurrences: [Occurrence!]!
  pid: String
  planId: Int
  plannedStartedAt: ISO8601DateTime
  projectStatusId: Int
  projectTypeId: Int!
  receiveDeploys: Boolean
  repositoryUrl: String
  retestedAt: ISO8601DateTime
  sacCode: String
  sacProjectId: Int
  scopeId: Int!
  secretId: String
  sshPublicKey: String
  startDate: ISO8601DateTime!
  students: Int
  subScopeId: Int
  updatedAt: ISO8601DateTime
  userableId: Int
  userableType: String
  vulnerabilitiesCount: Int!
  waiting: Boolean!
}

type ProjectCollection {
  collection: [Project!]!
  metadata: CollectionMetadata!
}

type Query {
  """
  Return the occurrence if the user has access
  """
  occurrence(id: ID!): Occurrence

  """
  Returns all occurrences the user has access
  """
  occurrences(page: Int, limit: Int): OccurrenceCollection

  """
  Returns all occurrences web the user has access
  """
  occurrencesWeb(page: Int, limit: Int): OccurrenceCollection

  """
  Return the project if the user has access
  """
  project(id: ID!): Project

  """
  Returns all projects the user has access
  """
  projects(page: Int, limit: Int): ProjectCollection!
}
